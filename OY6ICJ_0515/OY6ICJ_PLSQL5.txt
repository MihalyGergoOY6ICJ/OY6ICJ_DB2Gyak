CREATE TABLE ZooLogs(datum DATE, event CHAR(100), adat CHAR(1000));

===========================================================================================================================================

CREATE OR REPLACE TRIGGER TZooInsert AFTER INSERT ON Zoo FOR EACH ROW
BEGIN
    INSERT INTO ZooLogs VALUES(sysdate, 'Beszúrás', to_char(:new.Id) || '_' || :new.Nev || '_' || :new.Fajta || '_' || to_char(:new.Szuletett) || '_' || to_char(:new.Suly) || '_' || to_char(:new.Ertek) || '_' || :new.Gondozo);
END;

===========================================================================================================================================

INSERT INTO Zoo VALUES(16, 'Wilson', 'Csirke', '01/01/2024', 10, 101010, 'Kis János');
SELECT * FROM ZooLogs;

===========================================================================================================================================

CREATE OR REPLACE TRIGGER TZooUpdate AFTER UPDATE ON Zoo FOR EACH ROW
BEGIN
    INSERT INTO ZooLogs VALUES(sysdate, 'Módosítás', to_char(:old.Id) || '_' || :old.Nev || '_' || :old.Fajta || '_' || to_char(:old.Szuletett) || '_' || to_char(:old.Suly) || '_' || to_char(:old.Ertek) || '_' || :old.Gondozo);
END;

===========================================================================================================================================

UPDATE Zoo SET Szuletett = '02/02/2024' WHERE id = 16;
SELECT * FROM ZooLogs;

===========================================================================================================================================

CREATE OR REPLACE TRIGGER TZooDelete AFTER DELETE ON Zoo FOR EACH ROW
BEGIN
    INSERT INTO ZooLogs VALUES(sysdate, 'Törlés', to_char(:old.Id) || '_' || :old.Nev || '_' || :old.Fajta || '_' || to_char(:old.Szuletett) || '_' || to_char(:old.Suly) || '_' || to_char(:old.Ertek) || '_' || :old.Gondozo);
END;

===========================================================================================================================================

DELETE FROM Zoo WHERE id = 16;
SELECT * FROM ZooLogs;

===========================================================================================================================================

CREATE OR REPLACE PROCEDURE DeleteAllTriggers IS
BEGIN
    EXECUTE IMMEDIATE 'DROP TRIGGER TZooInsert';
    EXECUTE IMMEDIATE 'DROP TRIGGER TZooUpdate';
    EXECUTE IMMEDIATE 'DROP TRIGGER TZooDelete';
END;

===========================================================================================================================================


BEGIN
    DeleteAllTriggers();
END;

===========================================================================================================================================

CREATE OR REPLACE PROCEDURE ChangePetBack(i NUMBER) IS
l VARCHAR(1000);
e VARCHAR(100);
pos1 NUMBER;
pos2 NUMBER;
id_n NUMBER;
nev VARCHAR(100);
fajta VARCHAR(100);
szuletett DATE;
suly NUMBER;
ertek NUMBER;
gondozo VARCHAR(100);

BEGIN
    SELECT adat, event INTO l, e FROM (SELECT adat, event, ROW_NUMBER() OVER (ORDER BY datum) AS r FROM ZooLogs) WHERE r = i;
    IF TRIM(TRAILING ' ' FROM e) = 'Módosítás' THEN

        id_n := SUBSTR(l, 1, INSTR(l, '_', 1, 1) - 1);

        pos1 := INSTR(l, '_', 1, 1);
        pos2 := INSTR(l, '_', 1, 2);
        nev := SUBSTR(l, pos1 + 1, pos2 - pos1 - 1);

        pos1 := pos2;
        pos2 := INSTR(l, '_', 1, 3);
        fajta := SUBSTR(l, pos1 + 1, pos2 - pos1 - 1);
        
        pos1 := pos2;
        pos2 := INSTR(l, '_', 1, 4);
        szuletett := SUBSTR(l, pos1 + 1, pos2 - pos1 - 1);
        
        
        pos1 := pos2;
        pos2 := INSTR(l, '_', 1, 5);
        suly := SUBSTR(l, pos1 + 1, pos2 - pos1 - 1);
        
        
        pos1 := pos2;
        pos2 := INSTR(l, '_', 1, 6);
        ertek := SUBSTR(l, pos1 + 1, pos2 - pos1 - 1);
        
        
        pos1 := pos2;
        pos2 := INSTR(l, '_', 1, 7);
        gondozo := TRIM(TRAILING ' ' FROM SUBSTR(l, pos1 + 1, 100));
        
        UPDATE Zoo SET Nev = nev, Fajta = fajta, Szuletett = szuletett, Suly = suly, Ertek = ertek, Gondozo = gondozo WHERE id = id_n;
    ELSE
        DBMS_OUTPUT.PUT_LINE('A megadott napló nem módosítás, hanem: ' || e);
    END IF;
END;

===========================================================================================================================================

BEGIN
   ChangePetBack(1); 
END

===========================================================================================================================================

CREATE OR REPLACE PROCEDURE ResetPet(i NUMBER) IS
l VARCHAR(1000);
e VARCHAR(100);
pos1 NUMBER;
pos2 NUMBER;
id_n NUMBER;
nev VARCHAR(100);
fajta VARCHAR(100);
szuletett DATE;
suly NUMBER;
ertek NUMBER;
gondozo VARCHAR(100);

BEGIN
    SELECT adat, event INTO l, e FROM (SELECT adat, event, ROW_NUMBER() OVER (ORDER BY datum) AS r FROM ZooLogs) WHERE r = i;
    IF TRIM(TRAILING ' ' FROM e) = 'Törlés' THEN

        id_n := SUBSTR(l, 1, INSTR(l, '_', 1, 1) - 1);      
        
        pos1 := INSTR(l, '_', 1, 1);
        pos2 := INSTR(l, '_', 1, 2);
        nev := SUBSTR(l, pos1 + 1, pos2 - pos1 - 1);

        pos1 := pos2;
        pos2 := INSTR(l, '_', 1, 3);
        fajta := SUBSTR(l, pos1 + 1, pos2 - pos1 - 1);
        
        pos1 := pos2;
        pos2 := INSTR(l, '_', 1, 4);
        szuletett := SUBSTR(l, pos1 + 1, pos2 - pos1 - 1);
        
        
        pos1 := pos2;
        pos2 := INSTR(l, '_', 1, 5);
        suly := SUBSTR(l, pos1 + 1, pos2 - pos1 - 1);
        
        
        pos1 := pos2;
        pos2 := INSTR(l, '_', 1, 6);
        ertek := SUBSTR(l, pos1 + 1, pos2 - pos1 - 1);
        
        
        pos1 := pos2;
        pos2 := INSTR(l, '_', 1, 7);
        gondozo := TRIM(TRAILING ' ' FROM SUBSTR(l, pos1 + 1, 100));
        

        INSERT INTO Zoo VALUES(id_n, nev, fajta, szuletett, suly, ertek, gondozo);
    ELSE
        DBMS_OUTPUT.PUT_LINE('A megadott napló nem törlés, hanem: ' || e);
    END IF;
END;

===========================================================================================================================================

BEGIN
    ResetPet(2);
END;

===========================================================================================================================================